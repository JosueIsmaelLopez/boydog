<html>

<head>
  <title>A Simple HTML Document</title>
  <link rel="stylesheet" href="/milligram.css">
  <script src="/jquery-2.2.4.min.js"></script>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="column">
        <form>
          <fieldset>
            global name: <input type="text" dog-val="name">
            global age: <input type="number" dog-val="age">
            <input type="text" placeholder="name" dog-val="users['1']['name']">
            <input type="text" placeholder="age" dog-val="users[1].age">
            <input type="text" placeholder="email" dog-val="users[1].email">
            <input type="text" placeholder="deep feature" dog-val="features['body']['up']" dog-options="stringify">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes" dog-options="stringify">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes[0].color">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes[1].color">
            feet<input type="text" placeholder="deep feature" dog-val="features.body.down.feet">
            <label for="ageRangeField">Age Range</label>
            <select id="ageRangeField">
              <option value="0-13">0-13</option>
              <option value="14-17">14-17</option>
              <option value="18-23">18-23</option>
              <option value="24+">24+</option>
            </select>
            <label for="commentField">Comment</label>
            <textarea placeholder="about" id="commentField" dog-val="about"></textarea>
            <label for="jsonField">JSON</label>
            <textarea placeholder="about" id="commentField" dog-val="." dog-options="stringify"></textarea>
            <div class="float-right">
              <input type="checkbox" id="confirmField">
              <label class="label-inline" for="confirmField">Send a copy to yourself</label>
            </div>
            <input class="button-primary" type="submit" value="Send">
          </fieldset>
        </form>
      </div>
      <div class="column">
        <!-- tasks stringify: <input type="text" dog-val="tasks" dog-options="stringify"> -->
        <!-- tasks length: <input id="forVal" type="text" dog-val="tasks" dog-options="length"> -->
        <table>
          <thead>
            <tr>
              <th>Task</th>
              <th>Progress</th>
              <th>C</th>
              <th>D</th>
            </tr>
          </thead>
          <tbody>
            
            
            
            <!-- <tr dog-each="#taskItems" dog-options="">
              <td><input type="text" dog-val="tasks[{{ i }}].toDo"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].progress"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].doer"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].done"></td>
            </tr> -->
            
            
            
            <tr dog-val="tasks" dog-options="walk">
              <td><input type="text" dog-val="tasks[{{ i }}].toDo"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].progress"></td>
            </tr>
            
            
            
          </tbody>
        </table>
        taskname: <input type="text" dog-val="newTaskName">
        <a class="button" href="javascript:void(0);" dog-run="addTask">Add task</a>
        <br/>
        
        apples: <input type="text" dog-val="appleQuantity">
        <a class="button" href="javascript:void(0);" dog-run="increaseApples">Increase apples</a>
      </div>
    </div>
  </div>
  
  <script src="/socket.io.js"></script>
  <script src="/mustache.js"></script>
  <script src="/lodash.min.js"></script>
  <script>
    $(function() {
      //Init
      jQuery.fn.htmlClean = function() {
        //Clean whitespaces
        this.contents().filter(function() {
          if (this.nodeType != 3) {
            $(this).htmlClean();
            return false;
          } else {
            this.textContent = $.trim(this.textContent);
            return !/\S/.test(this.nodeValue);
          }
        }).remove();
        
        //Normalize attribute paths (i.e.: address.gps.lat = address['gps']['lat'])
        function normalizePaths(attrName) {
          $('[' + attrName + ']').each(function(i, el) {
            var attr = $(el).attr(attrName);

            var attr = _.toPath(attr);
          
            if (attr.length > 1) {
              attr = attr.shift() + "['" + attr.join("']['") + "']";
            } else {
              attr = attr.shift();
            }
            
            $(el).attr(attrName, attr);
          });
        };
        
        normalizePaths('dog-val');
        normalizePaths('dog-run');
        //TODO: Add all normalizations
        
        return this;
      }
      $('html').htmlClean(); //Clean html for whitespaces and line-breaks
      
      var socket = io.connect('http://localhost:3090');
      
      //Socket functions
      socket.on('connect', function(data) {
        console.log("socket on connect");
      });
      
      /*//Generate dog-each element
      $('[dog-each]').each(function(k, el) {
        var parent = $(el).parent();
        var blueprint = $(el).html();
        var options = $(el).attr('dog-options') || "";
        
        var tracking = $(el).attr('dog-each');
        console.log("tracking", tracking, $(el), +$(tracking).val())
        
        for (i = 0; i < +$(tracking).val(); i++) {
          var newEl = $(el).clone();
          
          newEl.removeAttr('dog-each');
          newEl.attr('dog-id', i);
          $(newEl).html(Mustache.render($(newEl).html(), { i: i }));
          
          //$(newEl).html($(newEl).html().replace('/\|i\|/g', i)); //Old replacement scheme
          
          if (options.indexOf("reverse") >= 0) {
            parent.prepend(newEl);
          } else {
            parent.append(newEl);
          }
        }
        
        $(el).css({ display: "none" });
      });*/
      
      var walkers = [];
      
      $('[dog-walk]').each(function(i, el) {
        //var repeat = $(el).attr("dog-walk").split(' as ');
        var attr = $(el).attr("dog-walk").trim();
        
        walkers.push($(attr).attr('dog-val'));
        console.log(walkers);
        
        //var token = repeat[1].trim();
        var parent = $(el).parent();
        
        
        for (i = 0; i < 4; i++) {
          var newEl = $(el).clone();
          
          newEl.removeAttr('dog-walk');
          $(newEl).html(Mustache.render($(newEl).html(), { i: i }));
          
          parent.append(newEl);
        }
        
        
        $(el).hide();
        
        console.log(i, el, attr)
      });
      
      function rebindDog(element) {
        if (!element) element = 'html';
        
        $(element).find('[dog-val]').each(function(i, el) {
          var attr = $(el).attr('dog-val');
          
          /*//Get initial values (use the POST version only as a fallback)
          $.post("/get", {
            attr: attr
          }).done(function(json) {
            var options = $(el).attr('dog-options') || "";
            
            var msg = json.msg;
            
            //if (options.indexOf("repeat") >= 0) {
            //  var parent = $(el).parent();
            //  console.log("is repeat");
            //  parent.empty();
            //  for (i = 0; i < 3; i++) {
            //    var blueprint = $(el).clone();
            //    console.log('bp', blueprint)
            //    parent.append(blueprint);
            //  }
            //  return;
            //}
            
            if (options.indexOf("stringify") >= 0) {
              msg = JSON.stringify(msg);
            } else if (options.indexOf("length") >= 0) {
              msg = JSON.stringify(msg.length);
            } else if (options.indexOf("keysAsArray") >= 0) {
              msg = JSON.stringify(_.range(msg.length));
            }
            
            $(el).val(msg);
          });*/
          
          socket.emit('boy-val', { attr: attr, get: true });
          
          //Functions for updating values
          $(el).off().keyup(function(field) {
            var val = field.currentTarget.value;
            var eachId = $(this).closest('[dog-id]').attr('dog-id');
            
            if (eachId) {
              //
            }
            
            socket.emit('boy-val', { attr: attr, set: val });
            
            //TODO: Implement fallback POST set version
            /*$.post("/set", { attr: attr, val: val }).done(function(json) {
              //
            });*/
          });
        });
      }
      
      rebindDog();
      
      
      $('[dog-run]').each(function(i, el) {
        var path = $(el).attr('dog-run');
        
        $(el).off().on('click', function() {
          socket.emit('boy-run', { path: path });
        });
      });
      
      //To set a value
      socket.on('dog-val', function(data) {
        var el = $('[dog-val="' + data.attr + '"]');
        var options = $(el).attr('dog-options') || "";
        var msg = data.val;
        
        if (options.indexOf("stringify") >= 0) msg = JSON.stringify(msg);
        if (options.indexOf("length") >= 0) {
          msg = +msg.length;
        }
        if (options.indexOf("walk") >= 0) {
          msg = +msg.length;
          
          console.log("should walk for?", msg)
          
          if (msg == $(el).attr('dog-lastwalk')) {
            console.log("no walk needed")
            
            return;
          }
          
          var upto = msg;
          var parent = $(el).parent();
        
          for (i = 0; i < upto; i++) {
            var newEl = $(el).clone();
            
            newEl.removeAttr('dog-val');
            newEl.removeAttr('dog-options');
            $(newEl).html(Mustache.render($(newEl).html(), { i: i }));
            
            parent.append(newEl);
          }
          
          $(el).hide();
          $(el).attr('dog-lastwalk', msg);
          rebindDog(parent);
        }
        
        el.val(msg);
      });
    });
  </script>
</body>

</html>