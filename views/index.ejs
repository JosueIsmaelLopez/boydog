<html>

<head>
  <title>A Simple HTML Document</title>
  <link rel="stylesheet" href="/milligram.css">
  <script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="column">
        <form>
          <fieldset>
            global name: <input type="text" dog-val="name">
            global age: <input type="number" dog-val="age">
            <input type="text" placeholder="name" dog-val="users[1].name">
            <input type="text" placeholder="age" dog-val="users[1].age">
            <input type="text" placeholder="email" dog-val="users[1].email">
            <input type="text" placeholder="deep feature" dog-val='features["body"]["up"]' dog-options="stringify">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes" dog-options="stringify">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes[0].color">
            <input type="text" placeholder="deep feature" dog-val="features.body.up.eyes[1].color">
            <label for="ageRangeField">Age Range</label>
            <select id="ageRangeField">
              <option value="0-13">0-13</option>
              <option value="14-17">14-17</option>
              <option value="18-23">18-23</option>
              <option value="24+">24+</option>
            </select>
            <label for="commentField">Comment</label>
            <textarea placeholder="about" id="commentField" dog-val="about"></textarea>
            <label for="jsonField">JSON</label>
            <textarea placeholder="about" id="commentField" dog-val="." dog-options="stringify"></textarea>
            <div class="float-right">
              <input type="checkbox" id="confirmField">
              <label class="label-inline" for="confirmField">Send a copy to yourself</label>
            </div>
            <input class="button-primary" type="submit" value="Send">
          </fieldset>
        </form>
      </div>
      <div class="column">
        <input type="text" dog-val="tasks" dog-options="stringify">
        add task: <input type="text" placeholder="qty" dog-val="addTask">
        <input id="taskItems" type="text" placeholder="qty" dog-val="tasks" dog-options="length">
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Age</th>
              <th>Height</th>
              <th>Location</th>
            </tr>
          </thead>
          <tbody>
            <tr dog-each="#taskItems" dog-options="">
              <td><input type="text" dog-val="tasks[{{ i }}].toDo"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].progress"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].doer"></td>
              <td><input type="text" dog-val="tasks[{{ i }}].done"></td>
            </tr>
          </tbody>
        </table>
        <a class="button" href="#">Add item</a>
        <button class="button button-outline">Other function A</button>
        <input class="button button-clear" type="submit" value="Other function B">
      </div>
    </div>
  </div>
  
  <script src="/socket.io.js"></script>
  <script src="/mustache.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"></script>
  <script>
    $(function() {
      //Init
      jQuery.fn.htmlClean = function() {
        this.contents().filter(function() {
          if (this.nodeType != 3) {
            $(this).htmlClean();
            return false;
          } else {
            this.textContent = $.trim(this.textContent);
            return !/\S/.test(this.nodeValue);
          }
        }).remove();
        
        return this;
      }
      $('html').htmlClean(); //Clean html for whitespaces and line-breaks
      
      var socket = io.connect('http://localhost:3090');
      
      //Socket functions
      socket.on('connect', function(data) {
        console.log("socket on connect");
      });
      
      //Generate dog-each element
      $('[dog-each]').each(function(k, el) {
        var parent = $(el).parent();
        var blueprint = $(el).html();
        var options = $(el).attr('dog-options') || "";
        
        var tracking = $(el).attr('dog-each');
        console.log("tracking", tracking, $(el), +$(tracking).val())
        
        for (i = 0; i < +$(tracking).val(); i++) {
          var newEl = $(el).clone();
          
          newEl.removeAttr('dog-each');
          newEl.attr('dog-id', i);
          $(newEl).html(Mustache.render($(newEl).html(), { i: i }));
          
          //$(newEl).html($(newEl).html().replace('/\|i\|/g', i)); //Old replacement scheme
          
          if (options.indexOf("reverse") >= 0) {
            parent.prepend(newEl);
          } else {
            parent.append(newEl);
          }
        }
        
        $(el).css({
          display: "none"
        });
      });
      
      $('[dog-val]').each(function(i, el) {
        var attr = $(el).attr('dog-val');
        
        /*//Get initial values (use the POST version only as a fallback)
        $.post("/get", {
          attr: attr
        }).done(function(json) {
          var options = $(el).attr('dog-options') || "";
          
          var msg = json.msg;
          
          //if (options.indexOf("repeat") >= 0) {
          //  var parent = $(el).parent();
          //  console.log("is repeat");
          //  parent.empty();
          //  for (i = 0; i < 3; i++) {
          //    var blueprint = $(el).clone();
          //    console.log('bp', blueprint)
          //    parent.append(blueprint);
          //  }
          //  return;
          //}
          
          if (options.indexOf("stringify") >= 0) {
            msg = JSON.stringify(msg);
          } else if (options.indexOf("length") >= 0) {
            msg = JSON.stringify(msg.length);
          } else if (options.indexOf("keysAsArray") >= 0) {
            msg = JSON.stringify(_.range(msg.length));
          }
          
          $(el).val(msg);
        });*/
        
        socket.emit('boy-val', {
          attr: attr,
          get: true
        });
        
        //Functions for updating values
        $(el).keyup(function(field) {
          var val = field.currentTarget.value;
          var eachId = $(this).closest('[dog-id]').attr('dog-id');
          
          if (eachId) {
            //
          }
          
          socket.emit('boy-val', {
            attr: attr,
            set: val
          });
          
          //TODO: Implement fallback POST set version
          /*$.post("/set", { attr: attr, val: val }).done(function(json) {
            //
          });*/
        });
      });
      
      //To set a value
      socket.on('dog-val', function(data) {
        var el = $("[dog-val='" + data.attr + "']");
        var options = $(el).attr('dog-options') || "";
        var msg = data.val;
        
        if (options.indexOf("stringify") >= 0) msg = JSON.stringify(msg);
        
        el.val(msg);
      });
    })
  </script>
</body>

</html>